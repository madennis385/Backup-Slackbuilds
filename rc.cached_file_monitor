#!/bin/sh
#
# /etc/rc.d/rc.cached_file_monitor
#
# Init script for Cached File Monitor

APP_NAME="cached_file_monitor"
APP_USER="nobody"  # Change if you want to run as another user
PYTHON_BIN="/usr/bin/python3"
SCRIPT_PATH="/opt/cached_file_monitor/main.py"
PID_FILE="/var/run/${APP_NAME}.pid"
LOG_FILE="/var/log/${APP_NAME}.log"

start() {
    echo "Starting ${APP_NAME}..."

    if [ -f "$PID_FILE" ] && kill -0 $(cat "$PID_FILE") 2>/dev/null; then
        echo "${APP_NAME} is already running."
        return 1
    fi

    # Start in background
    su -s /bin/sh -c "nohup $PYTHON_BIN $SCRIPT_PATH --no-input >> $LOG_FILE 2>&1 & echo \$! > $PID_FILE" $APP_USER
    echo "${APP_NAME} started with PID $(cat $PID_FILE)"
}

stop() {
    echo "Stopping ${APP_NAME}..."
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            sleep 1
            if kill -0 "$PID" 2>/dev/null; then
                echo "Force killing ${PID}..."
                kill -9 "$PID"
            fi
            echo "${APP_NAME} stopped."
        else
            echo "Process not running. Cleaning up stale PID file."
        fi
        rm -f "$PID_FILE"
    else
        echo "No PID file found. Is ${APP_NAME} running?"
    fi
}

restart() {
    stop
    sleep 1
    start
}

status() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "${APP_NAME} is running with PID $PID."
            return 0
        else
            echo "${APP_NAME} PID file found, but process not running."
            return 1
        fi
    else
        echo "${APP_NAME} is not running."
        return 3
    fi
}

case "$1" in
    start) start ;;
    stop) stop ;;
    restart) restart ;;
    status) status ;;
    *) echo "Usage: $0 {start|stop|restart|status}" ;;
esac

exit 0
